pragma solidity >=0.4.22 <0.7.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract LichTokenSimple is IERC20{

    uint256 constant MAX_UINT = 2**256 - 1;
    uint256 _totalSupply=1*10**26;
    uint8 constant public decimals = 18;
    string constant public name = "LichTokenSimple";
    string constant public symbol = "LTS";
    mapping(address=>uint256) balances;
    mapping(address=>mapping(address=>uint256)) allowances;

    constructor() public{
        balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function totalSupply() external view override returns (uint256){
        return _totalSupply;
    }

    function balanceOf(address account) external view override returns (uint256){
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool){
        if(balances[msg.sender]>=amount&&balances[recipient]+amount>=balances[recipient]){
            balances[msg.sender]-=amount;
            balances[recipient]+=amount;
            emit Transfer(msg.sender,recipient,amount);
            return true;
        }else{
            return false;
        }
    }

    function allowance(address owner, address spender) external view override returns (uint256){
        return allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool){
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){
        uint256 allow = allowances[sender][msg.sender];
        if (balances[sender] >= amount && allow >= amount && balances[recipient] + amount >= balances[recipient]) {
            balances[recipient] += amount;
            balances[sender] -= amount;
            if (allow < MAX_UINT) {
                allowances[sender][msg.sender] -= amount;
            }
            Transfer(sender, recipient, amount);
            return true;
        } else {
            return false;
        }
    }
}